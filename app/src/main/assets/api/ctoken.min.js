"usr strict";var CToken=function(b,a){this.currentProvider=b;this.contractAccount=a;this.web3;this.isConnected=false;this.chainID;this.gasPrice;this.contractOwner;this.tokenDecimals=8};CToken.prototype.initCToken=function(){var c=this;if(typeof c.web3!=="undefined"){web3=new Web3(c.web3.currentProvider);return true}else{var a=c.currentProvider.indexOf(":");var b=c.currentProvider.slice(0,a);if(b=="ws"){web3=new Web3(new Web3.providers.WebsocketProvider(c.currentProvider))}else{if(b=="http"){web3=new Web3(new Web3.providers.HttpProvider(c.currentProvider))}else{console.log("sorry, do not support network mode");return false}}let pListening=web3.eth.net.isListening();Promise.all([pListening]).then(function(d){var e;[e]=d;if(e){console.log("connect ",c.currentProvider," success");isConnected=true;formatedData=web3.eth.abi.encodeFunctionSignature("Owner()");rawTx1={to:c.contractAccount,data:formatedData};let pGasPrice=web3.eth.getGasPrice();let pID=web3.eth.net.getId();let pOwner=web3.eth.call(rawTx1);Promise.all([pGasPrice,pID,pOwner]).then(function(g){var f;[c.gasPrice,c.chainID,f]=g;c.contractOwner="0x"+f.slice(26)})}else{c.isConnected=false;console.log("can not connect network");web3.setProvider(c.currentProvider)}})}return true};CToken.prototype.createWallet=function(a,b){var d;var c;web3.eth.accounts.wallet.clear();web3.eth.accounts.wallet.create(0);c=web3.eth.accounts.create(web3.utils.randomHex(32));web3.eth.accounts.wallet.add(c);d=web3.eth.accounts.wallet.save(b,a);if(d){return c.address.toLowerCase()}else{return}};CToken.prototype.loadWallet=function(a,c,f){if(!web3.utils.isAddress(f)){console.log("invalid account");return}try{var b=web3.eth.accounts.wallet.load(c,a);for(var d=0;d<b.length;d++){if(f.toLowerCase().localeCompare(b[d].address.toLowerCase())==0){return b[d].privateKey}}console.log("no account in wallet");return}catch(e){console.log("wrong password");return}};CToken.prototype.exportWallet=function(a,c){try{var b=web3.eth.accounts.wallet.load(c,a);return localStorage.getItem(a)}catch(d){console.log("wrong password");return}};CToken.prototype.importWallet=function(a,e,b){var c=JSON.parse(e);localStorage.setItem(a,e);try{web3.eth.accounts.wallet.load(b,a);return"0x"+c[0].address.toLowerCase()}catch(d){console.log("wrong password");return}};CToken.prototype.setInitAccount=function(b,g,e,d,h){var i;var a;var f;var c=this;if(!isConnected){console.log("connect network failed");return false}if(web3.utils.isAddress(e)){if(e.toLowerCase().localeCompare(c.contractOwner.toLowerCase())!=0){console.log("error, it's not Owner");return false}}else{console.log("invalid account");return false}if(!web3.utils.isAddress(d)){console.log("invalid initial account");return false}f=c.loadWallet(b,g,e);if(typeof f=="undefined"){console.log("don't find valid wallet");return false}i=web3.eth.abi.encodeFunctionSignature("setInitAccount(address)");i+=web3.eth.abi.encodeParameter("address",d).slice(2);a={from:e,to:c.contractAccount,value:"0x00",data:i};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(e);Promise.all([pEstimateGas,pNonce]).then(function(k){var l,j;[l,j]=k;a={nonce:j,to:c.contractAccount,value:"0x00",gasPrice:c.gasPrice,gasLimit:l*10,data:i,chainId:c.chainID};let pSign=web3.eth.accounts.signTransaction(a,f);Promise.all([pSign]).then(function(m){[signedData]=m;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(n){[receipt]=n;if(typeof h!="undefined"){h(null,receipt.transactionHash)}})})});return true};CToken.prototype.setRate=function(c,h,f,b,i){var e;var j;var a;var g;var d=this;if(!isConnected){console.log("connect network failed");return false}if(b>3||b<1){console.log("invalid rate");return false}if(web3.utils.isAddress(f)){if(f.toLowerCase().localeCompare(d.contractOwner.toLowerCase())!=0){console.log("error, it's not Owner");return false}}else{console.log("invalid account");return false}e=parseInt(b*100);g=d.loadWallet(c,h,f);if(typeof g=="undefined"){console.log("don't find valid wallet");return false}j=web3.eth.abi.encodeFunctionSignature("setRate(uint256)");j+=web3.eth.abi.encodeParameter("uint256",e).slice(2);a={from:f,to:d.contractAccount,value:"0x00",data:j};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(f);Promise.all([pEstimateGas,pNonce]).then(function(l){var m,k;[m,k]=l;a={nonce:k,to:d.contractAccount,value:"0x00",gasPrice:d.gasPrice,gasLimit:m*10,data:j,chainId:d.chainID};let pSign=web3.eth.accounts.signTransaction(a,g);Promise.all([pSign]).then(function(n){[signedData]=n;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(o){[receipt]=o;if(typeof i!="undefined"){i(null,receipt.transactionHash)}})})});return true};CToken.prototype.getRate=function(c){var b,a;if(!isConnected){console.log("connect network failed");return false}if(typeof c=="undefined"){console.log("error, please input callback function");return false}b=web3.eth.abi.encodeFunctionSignature("getRate()");a={to:this.contractAccount,data:b};let pCall=web3.eth.call(a);Promise.all([pCall]).then(function(e){var d;[d]=e;d=web3.utils.hexToNumber(d)/100;c(null,d)});return true};CToken.prototype.setUserMaster=function(b,g,d,e,h){var i;var a;var f;var c=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(e)){console.log("invalid account");return false}if(web3.utils.isAddress(d)){if(d.toLowerCase().localeCompare(c.contractOwner.toLowerCase())!=0){console.log("error, it's not Owner");return false}}else{console.log("invalid execute account");return false}f=c.loadWallet(b,g,d);if(typeof f=="undefined"){console.log("don't find valid wallet");return false}i=web3.eth.abi.encodeFunctionSignature("setUserMaster(address)");i+=web3.eth.abi.encodeParameter("address",e).slice(2);a={from:d,to:c.contractAccount,value:"0x00",data:i};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(d);Promise.all([pEstimateGas,pNonce]).then(function(k){var m,j;var l;[m,j]=k;l={nonce:j,to:c.contractAccount,value:"0x00",gasPrice:c.gasPrice,gasLimit:m*10,data:i,chainId:c.chainID};let pSign=web3.eth.accounts.signTransaction(l,f);Promise.all([pSign]).then(function(n){[signedData]=n;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(o){[receipt]=o;if(typeof h!="undefined"){h(null,receipt.transactionHash)}})})});return true};CToken.prototype.getUserMaster=function(c){var b,a;if(!isConnected){console.log("connect network failed");return false}if(typeof c=="undefined"){console.log("error, please input callback function");return false}b=web3.eth.abi.encodeFunctionSignature("getUserMaster()");a={to:this.contractAccount,data:b};let pCall=web3.eth.call(a);Promise.all([pCall]).then(function(d){var e;[userMaster]=d;e="0x"+userMaster.slice(26);c(null,e)});return true};CToken.prototype.setFeeAccount=function(b,g,e,d,h){var i;var a;var f;var c=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(d)){console.log("invalid fee account");return false}if(web3.utils.isAddress(e)){if(e.toLowerCase().localeCompare(c.contractOwner.toLowerCase())!=0){console.log("error, it's not Owner");return false}}else{console.log("invalid execute account");return false}f=c.loadWallet(b,g,e);if(typeof f=="undefined"){console.log("don't find valid wallet");return false}i=web3.eth.abi.encodeFunctionSignature("setFeeAccount(address)");i+=web3.eth.abi.encodeParameter("address",d).slice(2);a={from:e,to:c.contractAccount,value:"0x00",data:i};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(e);Promise.all([pEstimateGas,pNonce]).then(function(k){var m,j;var l;[m,j]=k;l={nonce:j,to:c.contractAccount,value:"0x00",gasPrice:c.gasPrice,gasLimit:m*10,data:i,chainId:c.chainID};let pSign=web3.eth.accounts.signTransaction(l,f);Promise.all([pSign]).then(function(n){[signedData]=n;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(o){[receipt]=o;if(typeof h!="undefined"){h(null,receipt.transactionHash)}})})});return true};CToken.prototype.getFeeAccount=function(c){var b,a;if(!isConnected){console.log("connect network failed");return false}if(typeof c=="undefined"){console.log("error, please input callback function");return false}b=web3.eth.abi.encodeFunctionSignature("getFeeAccount()");a={to:this.contractAccount,data:b};let pCall=web3.eth.call(a);Promise.all([pCall]).then(function(d){var e;[feeAccount]=d;e="0x"+feeAccount.slice(26);c(null,e)});return true};CToken.prototype.registerUser=function(c,g,e,b,h){var i;var a;var f;var d=this;if(!isConnected){console.log("connect network failed");return false}if(web3.utils.isAddress(e)){i=web3.eth.abi.encodeFunctionSignature("getUserMaster()");a={to:d.contractAccount,data:i};let pCall=web3.eth.call(a);Promise.all([pCall]).then(function(j){var k;[userMaster]=j;k="0x"+userMaster.slice(26);if(e.toLowerCase().localeCompare(k.toLowerCase())!=0){console.log("error, it's not user master");return false}if(!web3.utils.isAddress(b)){console.log("invalid user account");return false}f=d.loadWallet(c,g,e);if(typeof f=="undefined"){console.log("don't find valid wallet");return false}i=web3.eth.abi.encodeFunctionSignature("registerUser(address)");i+=web3.eth.abi.encodeParameter("address",b).slice(2);a={from:e,to:d.contractAccount,value:"0x00",data:i};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(e);Promise.all([pEstimateGas,pNonce]).then(function(m){var n,l;[n,l]=m;a={nonce:l,to:d.contractAccount,value:"0x00",gasPrice:d.gasPrice,gasLimit:n*10,data:i,chainId:d.chainID};let pSign=web3.eth.accounts.signTransaction(a,f);Promise.all([pSign]).then(function(o){[signedData]=o;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(p){[receipt]=p;if(typeof h!="undefined"){h(null,receipt.transactionHash)}})})});return true})}else{console.log("invalid execute account");return false}};CToken.prototype.checkUser=function(a,d){var c,b;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(a)){console.log("invalid user account");return false}if(typeof d=="undefined"){console.log("error, please input callback function");return false}c=web3.eth.abi.encodeFunctionSignature("checkUser(address)");c+=web3.eth.abi.encodeParameter("address",a).slice(2);b={to:this.contractAccount,data:c};let pCall=web3.eth.call(b);Promise.all([pCall]).then(function(e){var f;[f]=e;f=web3.utils.hexToNumber(f);d(null,f)});return true};CToken.prototype.exchangeToken=function(b,h,d,e,i){var g;var j;var a;var f;var c=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(d)){console.log("invalid execute account");return false}if(e<1||e>100){console.log("invalid bonus");return false}f=c.loadWallet(b,h,d);if(typeof f=="undefined"){console.log("don't find valid wallet");return false}g=e*Math.pow(10,c.tokenDecimals);g=g.toFixed();g=web3.utils.toHex(g);j=web3.eth.abi.encodeFunctionSignature("exchangeToken(uint256)");j+=web3.eth.abi.encodeParameter("uint256",g).slice(2);a={from:d,to:c.contractAccount,value:"0x00",data:j};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(d);Promise.all([pEstimateGas,pNonce]).then(function(l){var m,k;[m,k]=l;a={nonce:k,to:c.contractAccount,value:"0x00",gasPrice:c.gasPrice,gasLimit:m*10,data:j,chainId:c.chainID};let pSign=web3.eth.accounts.signTransaction(a,f);Promise.all([pSign]).then(function(n){[signedData]=n;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(o){[receipt]=o;if(typeof i!="undefined"){i(null,receipt.transactionHash)}})})});return true};CToken.prototype.transferByFee=function(d,i,f,b,c,j){var h;var k;var a;var g;var e=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(f)||!web3.utils.isAddress(b)){console.log("invalid input account");return false}g=e.loadWallet(d,i,f);if(typeof g=="undefined"){console.log("don't find valid wallet");return false}h=c*Math.pow(10,e.tokenDecimals);h=h.toFixed();h=web3.utils.toHex(h);k=web3.eth.abi.encodeFunctionSignature("transferByFee(address,uint256)");k+=web3.eth.abi.encodeParameter("address",b).slice(2);k+=web3.eth.abi.encodeParameter("uint256",h).slice(2);a={from:f,to:e.contractAccount,value:"0x00",data:k};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(f);Promise.all([pEstimateGas,pNonce]).then(function(m){var n,l;[n,l]=m;a={nonce:l,to:e.contractAccount,value:"0x00",gasPrice:e.gasPrice,gasLimit:n*10,data:k,chainId:e.chainID};let pSign=web3.eth.accounts.signTransaction(a,g);Promise.all([pSign]).then(function(o){[signedData]=o;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(p){[receipt]=p;if(typeof j!="undefined"){j(null,receipt.transactionHash)}})})});return true};CToken.prototype.transfer=function(d,i,f,b,c,j){var h;var k;var a;var g;var e=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(f)||!web3.utils.isAddress(b)){console.log("invalid input account");return false}g=e.loadWallet(d,i,f);if(typeof g=="undefined"){console.log("don't find valid wallet");return false}h=c*Math.pow(10,e.tokenDecimals);h=h.toFixed();h=web3.utils.toHex(h);k=web3.eth.abi.encodeFunctionSignature("transfer(address,uint256)");k+=web3.eth.abi.encodeParameter("address",b).slice(2);k+=web3.eth.abi.encodeParameter("uint256",h).slice(2);a={from:f,to:e.contractAccount,value:"0x00",data:k};let pEstimateGas=web3.eth.estimateGas(a);let pNonce=web3.eth.getTransactionCount(f);Promise.all([pEstimateGas,pNonce]).then(function(m){var n,l;[n,l]=m;a={nonce:l,to:e.contractAccount,value:"0x00",gasPrice:e.gasPrice,gasLimit:n*10,data:k,chainId:e.chainID};let pSign=web3.eth.accounts.signTransaction(a,g);Promise.all([pSign]).then(function(o){[signedData]=o;let pSend=web3.eth.sendSignedTransaction(signedData.rawTransaction);Promise.all([pSend]).then(function(p){[receipt]=p;if(typeof j!="undefined"){j(null,receipt.transactionHash)}})})});return true};CToken.prototype.balanceOf=function(b,e){var d,a;var c=this;if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(b)){console.log("invalid target account");return false}if(typeof e=="undefined"){console.log("error, please input callback function");return false}d=web3.eth.abi.encodeFunctionSignature("balanceOf(address)");d+=web3.eth.abi.encodeParameter("address",b).slice(2);a={to:this.contractAccount,data:d};let pCall=web3.eth.call(a);Promise.all([pCall]).then(function(g){var i,h,f;[i]=g;h=web3.utils.hexToNumber(i.slice(0,54));f=web3.utils.hexToNumber(i.slice(54,66));i=f+h*281474976710656;i=i/(1*Math.pow(10,c.tokenDecimals));i=i.toFixed(c.tokenDecimals);e(null,i)});return true};CToken.prototype.balanceOwner=function(a,e){var d,b;var c=this;if(!isConnected){console.log("connect network failed");return false}if(web3.utils.isAddress(a)){if(a.toLowerCase().localeCompare(c.contractOwner.toLowerCase())!=0){console.log("error, it's not Owner");return false}}else{console.log("invalid execute account");return false}if(!web3.utils.isAddress(target)){console.log("invalid target account");return false}if(typeof e=="undefined"){console.log("error, please input callback function");return false}d=web3.eth.abi.encodeFunctionSignature("balanceOf(address)");d+=web3.eth.abi.encodeParameter("address",target).slice(2);b={to:this.contractAccount,data:d};let pCall=web3.eth.call(b);Promise.all([pCall]).then(function(f){var g;[g]=f;g=web3.utils.hexToNumber(g)/(1*Math.pow(10,c.tokenDecimals));g=g.toFixed(c.tokenDecimals);e(null,g)});return true};CToken.prototype.showHistoryTransactions=function(f,h){var e,b;var c,a;var g=this;var d=new Array();if(!isConnected){console.log("connect network failed");return false}if(!web3.utils.isAddress(f)){console.log("invalid target account");return false}if(typeof h=="undefined"){console.log("error, please input callback function");return false}b=web3.utils.leftPad(f,64);e=web3.eth.abi.encodeEventSignature("TransferByTime(address,address,uint256,uint256)");c=web3.eth.getPastLogs({address:g.contractAccount,topics:[e,b,null],fromBlock:"earliest"});a=web3.eth.getPastLogs({address:g.contractAccount,topics:[e,null,b],fromBlock:"earliest"});Promise.all([c,a]).then(function(m){[res1,res2]=m;for(var k=0;k<res1.length;k++){var j={};var m,l;var n=new Date();j.from="0x"+res1[k].topics[1].slice(26);j.to="0x"+res1[k].topics[2].slice(26);m=res1[k].data.slice(0,66);m=web3.utils.hexToNumber(m)/(1*Math.pow(10,g.tokenDecimals));j.value=m.toFixed(g.tokenDecimals);l="0x"+res1[k].data.slice(67,131);l=web3.utils.hexToNumber(l);n.setTime(l*1000);j.time=n.toString();d.push(j)}for(var k=0;k<res2.length;k++){var j={};var m,l;var n=new Date();j.from="0x"+res2[k].topics[1].slice(26);j.to="0x"+res2[k].topics[2].slice(26);m=res2[k].data.slice(0,66);m=web3.utils.hexToNumber(m)/(1*Math.pow(10,g.tokenDecimals));j.value=m.toFixed(g.tokenDecimals);l="0x"+res2[k].data.slice(67,131);l=web3.utils.hexToNumber(l);n.setTime(l*1000);j.time=n.toString();d.push(j)}h(null,d)});return true};